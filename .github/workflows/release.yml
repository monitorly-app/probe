name: Release Build

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0

permissions:
  contents: write # Needed for creating releases

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build executable
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Create output directory
          mkdir -p release

          # Build the executable
          BINARY_NAME=monitorly-probe
          go build -v -ldflags="-X 'main.Version=${{ env.VERSION }}'" -o release/${BINARY_NAME} ./cmd/probe

          # Create archive with executable + config example
          cd release
          cp ../config.yaml.example config.yaml.example

          # Create both the standalone binary and the archive
          BINARY_NAME_WITH_META=monitorly-probe-${{ env.VERSION }}-linux-${{ matrix.goarch }}

          # Copy the binary with metadata for standalone distribution
          cp ${BINARY_NAME} ${BINARY_NAME_WITH_META}

          # Create archive with executable + config
          ARCHIVE_NAME=monitorly-probe-${{ env.VERSION }}-linux-${{ matrix.goarch }}-with-config
          tar -czf ${ARCHIVE_NAME}.tar.gz ${BINARY_NAME} config.yaml.example
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monitorly-probe-${{ env.VERSION }}-linux-${{ matrix.goarch }}
          path: |
            release/*.tar.gz
            release/monitorly-probe-${{ env.VERSION }}-linux-${{ matrix.goarch }}
          retention-days: 1

  create-release:
    name: Create Release
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts for release
        id: organize
        run: |
          mkdir -p release_files

          # Get a list of all artifact files
          echo "Found files in artifacts directory:"
          find artifacts -type f -not -path "*/\.*" | sort

          # First copy the archive files (.tar.gz)
          echo "Copying archive files..."
          find artifacts -name "*.tar.gz" | while read file; do
            filename=$(basename "$file")
            echo "Copying archive: $filename"
            cp "$file" "release_files/${filename}"
          done

          # Then copy the binary files
          echo "Copying binary files..."
          find artifacts -type f -not -name "*.tar.gz" | while read file; do
            filename=$(basename "$file")
            # Skip non-executable files (in case there are any)
            if [[ "$filename" != monitorly-probe-* ]]; then
              echo "Skipping non-binary file: $filename"
              continue
            fi

            echo "Copying binary: $filename"
            cp "$file" "release_files/${filename}"
          done

          echo "Files prepared for release:"
          ls -la release_files

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Monitorly Probe ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release_files/*